{"version":3,"sources":["logo.svg","components/Navbar.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","href","title","type","id","Form","useState","text","setText","style","mode","htmlFor","onChange","event","target","value","rows","onClick","toUpperCase","toLowerCase","change","txt","document","getElementById","select","navigator","clipboard","writeText","endsWith","split","length","App","color","backgroundColor","txtStyle","setTxtStyle","setTxt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4KAAe,I,YCGA,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAU,sCAAf,SACN,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeC,KAAK,IAAjC,SAAsCF,EAAMG,QAC5C,wBAAQF,UAAU,iBAAiBG,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMH,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BI,GAAG,yBAA7C,UACE,qBAAIJ,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOC,KAAK,IAAxD,oBAEF,oBAAID,UAAU,WAAd,SACE,mBAAGA,UAAU,WAAWC,KAAK,SAA7B,wBAIJ,sBAAMD,UAAU,mBClBP,SAASK,EAAKN,GACzB,MAAwBO,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA+BA,OAEA,sBAAKR,UAAU,YAAaS,MAAOV,EAAMW,KAAzC,UAEQ,sBAAKV,UAAU,YAAf,UACA,uBAAOW,QAAQ,SAASX,UAAU,uBAAlC,4BACA,0BAAUA,UAAU,eAAgBY,SAvB5C,SAAwBC,GAEpBL,EAAQK,EAAMC,OAAOC,QAqB6CA,MAAOR,EAAMH,GAAG,SAASY,KAAK,SAEhG,wBAAQhB,UAAU,oCAAoCiB,QArC1D,WACIT,EAAQD,EAAKW,gBAoCb,kCACA,wBAAQlB,UAAU,oCAAoCiB,QAlC1D,WACIT,EAAQD,EAAKY,gBAiCb,kCACA,wBAAQnB,UAAU,oCAAoCiB,QAhC1D,WACIT,EAAQ,KA+BR,sBACA,wBAAQR,UAAU,oCAAoCiB,QAASlB,EAAMqB,OAArE,SAA8ErB,EAAMQ,OACpF,wBAAQP,UAAU,oCAAoCiB,QApB1D,WACI,IAAII,EAAIC,SAASC,eAAe,UAChCF,EAAIG,SACJC,UAAUC,UAAUC,UAAUN,EAAIN,QAiBlC,sBACA,sBAAKf,UAAU,OAAf,UACI,mDACA,8BAAW,KAAPO,GAAaA,EAAKqB,SAAS,KAAOrB,EAAKsB,MAAM,KAAKC,OAAQ,EAAKvB,EAAKsB,MAAM,KAAKC,OAAnF,YAEC,8BAAIvB,EAAKuB,OAAT,iBACD,kCAAK,KAAa,KAAPvB,GAAYA,EAAKqB,SAAS,KAAOrB,EAAKsB,MAAM,KAAKC,OAAQ,EAAGvB,EAAKsB,MAAM,KAAKC,QAAvF,kDCZGC,MAlCf,WACE,MAAgCzB,mBAAS,CACvC0B,MAAO,QACPC,gBAAiB,UAFnB,mBAAOC,EAAP,KAAiBC,EAAjB,KAKF,EAAsB7B,mBAAS,QAA/B,mBAAOe,EAAP,KAAYe,EAAZ,KAiBE,OACE,qCAGA,cAAC,EAAD,CAAQlC,MAAM,eACd,cAACG,EAAD,CAAMK,KAAMwB,EAAUd,OArB1B,WACa,SAANC,GACHc,EAAY,CACRH,MAAM,QACNC,gBAAgB,UAEpBG,EAAO,UAEO,UAANf,IACJc,EAAY,CACRH,MAAM,QACNC,gBAAgB,UAEpBG,EAAO,UAQ+B7B,KAAMc,QCvBrCgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1Bc,K","file":"static/js/main.b1a4107f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function NavBar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar- bg-\">\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/About\">About</a>\r\n        </li>\r\n        \r\n      </ul>\r\n      <form className=\"d-flex\">\r\n        \r\n          {/* <button className=\"btn btn-outline-success\" >DARK</button> */}\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\nNavBar.propTypes={title: PropTypes.string.isRequired}\r\n","import React ,{useState} from 'react'\r\n// import NavBar from './NavBar';\r\n\r\nexport default function Form(props) {\r\n    const [text, setText] = useState(\"\");\r\n    \r\n    function clickedup() {\r\n        setText(text.toUpperCase())\r\n        \r\n    }\r\n    function clickedlo() {\r\n        setText(text.toLowerCase())\r\n    }\r\n    function clickedcl() {\r\n        setText('');\r\n        \r\n    }\r\n    \r\n    function handleOnChange(event) {\r\n\r\n        setText(event.target.value);\r\n    }\r\n    // const [txtStyle, setTxtStyle] = useState({\r\n    //     color: \"black\" ,\r\n    //     backgroundColor: \"white\"\r\n    // })\r\n   \r\n    function copyText() {\r\n        let txt=document.getElementById('my_box')\r\n        txt.select();\r\n        navigator.clipboard.writeText(txt.value);  \r\n        \r\n    }\r\n    \r\n\r\n    return(\r\n        \r\n    <div className=\"container\"  style={props.mode}>\r\n        \r\n            <div className=\"mb-3 my-4\" >\r\n            <label htmlFor=\"my_box\" className=\"form-label mx-2 my-3\">Enter the Text</label>\r\n            <textarea className=\"form-control\"  onChange={handleOnChange} value={text} id=\"my_box\" rows=\"8\"></textarea>\r\n            </div>\r\n        <button className=\"btn btn-outline-success mx-1 my-1\" onClick={clickedup}>Convert to UpperCase</button>\r\n        <button className=\"btn btn-outline-success mx-1 my-1\" onClick={clickedlo}>Convert to LowerCase</button>\r\n        <button className=\"btn btn-outline-success mx-1 my-1\" onClick={clickedcl}>ClearALL</button>\r\n        <button className=\"btn btn-outline-success mx-1 my-1\" onClick={props.change}>{props.text}</button>\r\n        <button className=\"btn btn-outline-success mx-1 my-1\" onClick={copyText}>copyText</button>\r\n        <div className=\"my-3\">\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text===\"\" || text.endsWith(\" \") ? text.split(' ').length -1  : text.split(' ').length} words</p>\r\n           \r\n             <p>{text.length} characters</p>\r\n            <p> {0.48*(text===\"\" ||text.endsWith(\" \") ? text.split(\" \").length -1: text.split(\" \").length) } seconds are requried to read the text</p>\r\n        </div>\r\n\r\n    </div>\r\n        \r\n    \r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Form from './components/Form';\nimport {useState } from \"react\";\n\n\nfunction App() {\n  const [txtStyle, setTxtStyle] = useState({\n    color: \"black\" ,\n    backgroundColor: \"white\"\n    \n})\nconst [txt, setTxt] = useState('Dark')\nfunction modeChange() {\n    if(txt==='Dark'){\n    setTxtStyle({\n        color:\"white\",\n        backgroundColor:\"black\"\n    })\n    setTxt('Light')\n    }\n    else if(txt==='Light'){\n        setTxtStyle({\n            color:\"black\",\n            backgroundColor:\"white\"\n        })\n        setTxt('Dark')\n    }\n}\n  return (\n    <>\n    \n    \n    <Navbar title='TextUtiles' ></Navbar>\n    <Form mode={txtStyle} change={modeChange} text={txt}></Form>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}